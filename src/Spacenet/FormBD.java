/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Spacenet;

import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import javax.swing.ImageIcon;

/**
 *
 * @author marco.junior
 */
public class FormBD extends javax.swing.JFrame {

    /**
     * Creates new form FormBD
     * @throws org.xml.sax.SAXException
     * @throws java.io.IOException
     * @throws javax.xml.transform.TransformerException
     * @throws javax.xml.parsers.ParserConfigurationException
     * @throws java.security.NoSuchAlgorithmException
     */
    public FormBD() throws SAXException, IOException, TransformerException, ParserConfigurationException, NoSuchAlgorithmException, InterruptedException {
        
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        leiaXml();
        jtBanco.setEditable(false);
        permissao();
        verificaDL();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public javax.swing.JTextField jSpacenetConfig;
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jBotaoSpIt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jtBanco = new javax.swing.JTextField();
        labelLCC = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SPACENET IT BACKUP - BANCO DE DADOS");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusable(false);
        setIconImage(new ImageIcon(getClass().getResource("/imagem/monitorminimo.png")).getImage());
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setText("BACKUP");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, -1, -1));

        jBotaoSpIt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBotaoSpIt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/monitorminimo.png"))); // NOI18N
        jBotaoSpIt.setText("SPACENET IT");
        jBotaoSpIt.setToolTipText("Este botão executa o Spacenet It");
        jBotaoSpIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotaoSpItActionPerformed(evt);
            }
        });
        jPanel1.add(jBotaoSpIt, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 170, -1));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Banco de Dados");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 100, 20));

        jtBanco.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtBanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtBancoActionPerformed(evt);
            }
        });
        jPanel1.add(jtBanco, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 170, 30));

        labelLCC.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelLCC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelLCC.setText("LICENÇA");
        jPanel1.add(labelLCC, new org.netbeans.lib.awtextra.AbsoluteConstraints(302, 282, 190, 40));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/nepos.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));
        jLabel3.getAccessibleContext().setAccessibleDescription("NEPOS PARKING");

        jMenuBar1.setInheritsPopupMenu(true);

        jMenu1.setText("Configuração");

        jMenuItem3.setText("Aplicação  ");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opções");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });

        jMenuItem2.setText("Sair");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseClicked(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
   //Pega String do jjLocalXml do FormConfig
    FormConfig TextBox = new FormConfig();
    String localXml = TextBox.jLocalXml.getText();
    
    FormConfig TextBoxAbrirIt = new FormConfig();
    String SpacenetIt = TextBoxAbrirIt.jSpacenetConfig.getText();
     
    public void permissao() throws IOException
    {
        String bancoSelect = jtBanco.getText();
        if(bancoSelect.equals(""))
        {
            JOptionPane.showMessageDialog(null," REALIZAR A CONFIGURAÇÃO DO APLICATIVO");
            jBotaoSpIt.setVisible(false);
        }
       
    } 
    
    private void jBotaoSpItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotaoSpItActionPerformed

        try {
        String aplicativo = SpacenetIt+"\\CaminhoSpace.bat";
        String comunicador = SpacenetIt+"\\SPNCOMM.EXE";
        ProcessBuilder P = new ProcessBuilder();
        P.command("cmd.exe","/C",aplicativo);
        File file = new File(aplicativo);
        File file_c = new File(comunicador);  

        if(file_c.exists())
        {
        JOptionPane.showMessageDialog(null,"ERRO DE INCONSISTÊNCIA","ERRO - SPCOMM",JOptionPane.ERROR_MESSAGE);
        }
         else if(file.exists()){
            P.start();
            JOptionPane.showMessageDialog(null,"SPACENT IT SERÁ ABERTO EM INSTANTES","NEPOS BACKUP",JOptionPane.INFORMATION_MESSAGE);
        }
         else{
            JOptionPane.showMessageDialog(null,"VERIFICAR ARQUIVO CAMINHOSPACENET","NEPOS BACKUP",JOptionPane.INFORMATION_MESSAGE);
         }       
        } 
        catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"Caminho do Arquivo CaminhoSpace deve ser : "+ex.getMessage());
            System.exit(0);
        }
        
    }//GEN-LAST:event_jBotaoSpItActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
      
        Object [] opcao = {"SIM","NAO"};
        int i = JOptionPane.showOptionDialog(null,"NEPOS BACKUP SERÁ FINALIZADO","MENU SAIR",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,opcao,opcao[1]);
        if(i == JOptionPane.YES_OPTION)
        {
        try {
        this.dispose();
        String fecharSpacenetAsa = SpacenetIt+"\\fecharSpacenetAsa.bat";
        ProcessBuilder P = new ProcessBuilder();
        P.command("cmd.exe","/C",fecharSpacenetAsa);
        P.start();
        } catch (IOException ex) {
        Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
        }
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        try {
            this.setVisible(false);
            FormConfig aplicacao = new FormConfig();
            aplicacao.setVisible(true);
        } catch (SAXException ex) {
            Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jtBancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtBancoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtBancoActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked


    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseClicked

    }//GEN-LAST:event_jMenuItem2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    try {
                        new FormBD().setVisible(true);
                    } catch (TransformerException ex) {
                        Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ParserConfigurationException ex) {
                        Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (SAXException ex) {
                    Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FormBD.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jBotaoSpIt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jtBanco;
    private javax.swing.JLabel labelLCC;
    // End of variables declaration//GEN-END:variables

public void leiaXml() throws SAXException, IOException, TransformerException, ParserConfigurationException
{
     try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(localXml);
            NodeList listaDiretorio = doc.getElementsByTagName("Configuracao");
            int tamanholista = listaDiretorio.getLength();
            
            for (int i=0; i < tamanholista ; i++)
            {       
                Node diretorio = listaDiretorio.item(i);
                
                if(diretorio.getNodeType() == Node.ELEMENT_NODE)
                {
                    Element elementoDiretorio = (Element) diretorio;
                    String ID = elementoDiretorio.getAttribute("ID");
                    System.out.println("Elemento ID" + ID);
                    NodeList listaDiretorioFilho = elementoDiretorio.getChildNodes();
                    int tamanhoListaFilho = listaDiretorioFilho.getLength();
                    
                    for(int j = 0 ; j < tamanhoListaFilho ; j ++)
                    {
                        Node diretorioFilho =listaDiretorioFilho.item(j);
                        if(diretorioFilho.getNodeType() == Node.ELEMENT_NODE)
                        {
                            Element elementoDiretorioFilho = (Element) diretorioFilho;
                            switch(elementoDiretorioFilho.getTagName())
                            {
                                case "Banco" :
                                    System.out.println("Banco" +elementoDiretorioFilho.getTextContent());
                                    jtBanco.setText(elementoDiretorioFilho.getTextContent());
                                    break;
                            }       
                        }         
                    }
                }
            }
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(FormConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
}         
 public void verificaDL() throws NoSuchAlgorithmException, IOException, SAXException
 {
     FormConfig localLCC = new FormConfig();
     String licenca = localLCC.jSpacenetConfig.getText();
     String pastaLCC = licenca+"\\licenca.xml";
     String pastaLCCHash="C:\\LCCBACKUP\\hash.xml";
     
     File diretorio = new File(pastaLCCHash);
     if(!diretorio.exists())
     {
         JOptionPane.showMessageDialog(null,"LICENÇA COM PROBLEMA","LICENÇA HASH",JOptionPane.WARNING_MESSAGE);
         jBotaoSpIt.setEnabled(false);
        // System.exit(0);
     }
     else
     {
         validacaoLCC(pastaLCC);
         String empreendimento = labelLCC.getText();
         validacaoLCCHash(pastaLCCHash,empreendimento);
     }
 }
 
 public void validacaoLCC(String localLicenca) throws NoSuchAlgorithmException, IOException, SAXException
 {
             try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(localLicenca);
            NodeList listaDiretorio = doc.getElementsByTagName("LICENCA");
            int tamanholista = listaDiretorio.getLength();
            for (int i=0; i < tamanholista ; i++)
            {
                Node diretorio = listaDiretorio.item(i);   
                if(diretorio.getNodeType() == Node.ELEMENT_NODE)
                {
                    Element elementoDiretorio = (Element) diretorio;
                    String ID = elementoDiretorio.getAttribute("ID");
                    System.out.println("Elemento ID" + ID);
                    //recebe os filhos
                    NodeList listaDiretorioFilho = elementoDiretorio.getChildNodes();
                    int tamanhoListaFilho = listaDiretorioFilho.getLength();
                    for(int j = 0 ; j < tamanhoListaFilho ; j ++)
                    {
                        Node diretorioFilho =listaDiretorioFilho.item(j);
                        if(diretorioFilho.getNodeType() == Node.ELEMENT_NODE)
                        {
                            Element elementoDiretorioFilho = (Element) diretorioFilho;
                            switch(elementoDiretorioFilho.getTagName())
                            {                               
                            case "EMPREENDIMENTO":
                                    System.out.println("EMPREENDIMENTO" );
                                    String emp =elementoDiretorioFilho.getTextContent();
                                    labelLCC.setText(emp);
                                  //  MessageDigest m = MessageDigest.getInstance("MD5");
                                 //   m.update( emp.getBytes(), 0 , emp.length() );         
                                 //   byte[] digest = m.digest();      
                                 //   String hexa = new BigInteger(1,digest).toString(16);
                                    jBotaoSpIt.setEnabled(false);
                                    break;                              
                            }         
                        }
                    }
                }
            }
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(FormConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
   }
 
 
 public void validacaoLCCHash(String localLicenca ,String empreendimento) throws NoSuchAlgorithmException, IOException, SAXException
 {
             try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(localLicenca);
            NodeList listaDiretorio = doc.getElementsByTagName("LICENCA");
            int tamanholista = listaDiretorio.getLength();
            for (int i=0; i < tamanholista ; i++)
            {
                Node diretorio = listaDiretorio.item(i);   
                if(diretorio.getNodeType() == Node.ELEMENT_NODE)
                {
                    Element elementoDiretorio = (Element) diretorio;
                    String ID = elementoDiretorio.getAttribute("ID");
                    NodeList listaDiretorioFilho = elementoDiretorio.getChildNodes();
                    int tamanhoListaFilho = listaDiretorioFilho.getLength();
                    for(int j = 0 ; j < tamanhoListaFilho ; j ++)
                    {
                        Node diretorioFilho =listaDiretorioFilho.item(j);
                        if(diretorioFilho.getNodeType() == Node.ELEMENT_NODE)
                        {
                            Element elementoDiretorioFilho = (Element) diretorioFilho;
                            switch(elementoDiretorioFilho.getTagName())
                            {           
                                case "HASH":
                                    String hash =elementoDiretorioFilho.getTextContent();
                                    MessageDigest m = MessageDigest.getInstance("MD5");
                                    m.update(empreendimento.getBytes(), 0 , empreendimento.length() );         
                                    byte[] digest = m.digest();      
                                    String hexa = new BigInteger(1,digest).toString(16);
                                    if(hexa.equals(hash))
                                    {
                                        jBotaoSpIt.setEnabled(true);
                                    }
                                    else
                                    {    
                                    JOptionPane.showMessageDialog(null,"ERRO NA LICENÇA \nNEPOS BACKUP SERÁ FECHADO","LICENÇA",JOptionPane.ERROR_MESSAGE);
                                    System.exit(0);
                                    }
                                    break;
                            }         
                        }
                    }   
                }   
            }
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(FormConfig.class.getName()).log(Level.SEVERE, null, ex);
        }
   }

}
 
 


